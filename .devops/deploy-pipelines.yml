parameters:
  - name: SEMVER
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - prod
  - name: MS_NAME
    displayName: 'Microservice to deploy'
    type: string
    values:
      - ente-creditore
      - hub-spid-login-ms
      - payments
      - queue-worker
      - service-management
      - upload-payments
    default: ente-creditore
  - name: STACK
    displayName: 'Stack of the microservice'
    default: java
    type: string
    values:
      - java
      - node
variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(DEV_CONTAINER_REGISTRY)
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(PROD_CONTAINER_REGISTRY)
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest


  
stages:
  
  # Checkout the monorepo
  - stage: Checkout
    jobs:
      - job: checkout
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

  # Create a release
  - stage: Release
    # condition:
    #   eq(variables['Build.SourceBranch'], 'refs/heads/main')
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: newVersion
        steps:
          - template: azure-templates/maven-versioning.yml 
            parameters:
              subproject: '${{ parameters.MS_NAME }}'
              semver: '${{ parameters.SEMVER }}'
      - job: readVersion
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=newversion;isOutput=true]$version"
              failOnStderr: true
              

  # - task: Cache@2
  #   inputs:
  #     key: 'maven | "$(Agent.OS)" | pom.xml'
  #     restoreKeys: |
  #       maven | "$(Agent.OS)"
  #       maven
  #     path: $(MAVEN_CACHE_FOLDER)
  #   displayName: Cache Maven local repo

  # - task: Maven@3
  #   inputs:
  #     mavenPomFile: 'pom.xml'
  #     mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
  #     javaHomeOption: 'JDKVersion'
  #     jdkVersionOption: '11'
  #     jdkArchitectureOption: 'x64'
  #     publishJUnitResults: false
  #     testResultsFiles: '**/surefire-reports/TEST-*.xml'
  #     goals: 'package'

  # # Build and deploy CREDITOR microservice docker
  # - task: Docker@2
  #   inputs:
  #     containerRegistry: $(CONTAINER_REGISTRY)
  #     repository: 'creditor'
  #     command: 'buildAndPush'
  #     Dockerfile: './ente-creditore/Dockerfile.deploy'
  #     tags: '0.0.2'

  # - task: AzureRMWebAppDeployment@4
  #   displayName: Azure App Service Deploy
  #   inputs:
  #     appType: webAppContainer
  #     ConnectedServiceName: $(AZURE_SUBSCRIPTION)
  #     WebAppName: 'hubpa-d-creditor-ms'
  #     DockerNamespace: 'hubpadarc.azurecr.io'
  #     DockerRepository: 'creditor'
  #     DockerImageTag: '0.0.2'

  # # Build and deploy JOB microservice docker
  # - task: Docker@2
  #   inputs:
  #     containerRegistry: $(CONTAINER_REGISTRY)
  #     repository: 'job'
  #     command: 'buildAndPush'
  #     Dockerfile: './upload-payments/Dockerfile.deploy'
  #     tags: '0.0.1'

  # - task: AzureRMWebAppDeployment@4
  #   displayName: Azure App Service Deploy
  #   inputs:
  #     appType: webAppContainer
  #     ConnectedServiceName: $(AZURE_SUBSCRIPTION)
  #     WebAppName: 'hubpa-d-job-ms'
  #     DockerNamespace: 'hubpadarc.azurecr.io'
  #     DockerRepository: 'job'
  #     DockerImageTag: '0.0.1'

  # # Build and deploy SERVICE microservice docker
  # - task: Docker@2
  #   inputs:
  #     containerRegistry: $(CONTAINER_REGISTRY)
  #     repository: 'service'
  #     command: 'buildAndPush'
  #     Dockerfile: './service-managment/Dockerfile.deploy'
  #     tags: '0.0.1'

  # - task: AzureRMWebAppDeployment@4
  #   displayName: Azure App Service Deploy
  #   inputs:
  #     appType: webAppContainer
  #     ConnectedServiceName: $(AZURE_SUBSCRIPTION)
  #     WebAppName: 'hubpa-d-service-ms'
  #     DockerNamespace: 'hubpadarc.azurecr.io'
  #     DockerRepository: 'service'
  #     DockerImageTag: '0.0.1'

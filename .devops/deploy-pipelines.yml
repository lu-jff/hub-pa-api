parameters:
  - name: SEMVER
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - prod
  - name: MS_NAME
    displayName: 'Microservice to deploy'
    type: string
    values:
      - ente-creditore
      - hub-spid-login-ms
      - payments
      - queue-worker
      - service-management
      - upload-payments
    default: ente-creditore
  - name: REPOSITORY
    displayName: 'Docker Repository'
    type: string
    values:
      - creditor
      - auth
      - job
      - queue-worker
      - service
      - payments
    default: ente-creditore
  - name: STACK
    displayName: 'Stack of the microservice'
    default: java
    type: string
    values:
      - java
      - node
variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(DEV_CONTAINER_REGISTRY)
    PREFIX: 'hubpa-d'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(PROD_CONTAINER_REGISTRY)
    PREFIX: 'hubpa-p'
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  title: ''
  sha: ''
  tag: ''


# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

stages:
      

  # Create a release
  - stage: Release
    # condition:
    #   eq(variables['Build.SourceBranch'], 'refs/heads/main')
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      
      - job: release
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            
          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"
              
          - template: azure-templates/maven-versioning.yml 
            parameters:
              subproject: '${{ parameters.MS_NAME }}'
              semver: '${{ parameters.SEMVER }}'

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat ${{ parameters.MS_NAME }}/pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - script: |
              HEAD_SHA=$(git rev-parse HEAD)
              TAG="${{ parameters.MS_NAME }}/$(pomversion.next)"
              TITLE="Release ${{ parameters.MS_NAME }}/$(pomversion.next)"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"

          - script: |
              git checkout ${{variables['Build.SourceBranchName']}}

          - script: |
              echo $(tag)
              echo $(title)
              echo $(sha)

          - script: |
              git add ${{ parameters.MS_NAME }}/pom.xml 
              git commit -m "Bump version [skip ci]"
              git push origin ${{variables['Build.SourceBranchName']}}
              git push --tags

          # create new releae
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: $(GITHUB_CONNECTION)
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(sha)
              tagSource: manual
              tag: $(tag)
              title: $(title)
              addChangelog: true
  
  # Create a release
  - stage: Deploy
    # condition:
    #   eq(variables['Build.SourceBranch'], 'refs/heads/main')
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      
      - job: deploy
        steps:
          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Cache Maven local repo
          
          - task: Bash@3
            name: pomversion
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat ${{ parameters.MS_NAME }}/pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Maven@3
            displayName: Package
            inputs:
              mavenPomFile: '${{ parameters.MS_NAME }}/pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: false
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'

          - task: Docker@2
            displayName: Build and Push Image
            inputs:
              containerRegistry: $(CONTAINER_REGISTRY)
              repository: '${{ parameters.REPOSITORY }}'
              command: 'buildAndPush'
              Dockerfile: './${{ parameters.MS_NAME }}/Dockerfile.deploy'
              tags: '$(pomversion.next)'

          - task: AzureRMWebAppDeployment@4
            displayName: Deploy Microservice
            inputs:
              appType: webAppContainer
              ConnectedServiceName: $(AZURE_SUBSCRIPTION)
              WebAppName: '${{variables.PREFIX}}-${{ parameters.REPOSITORY }}-ms'
              DockerNamespace: 'hubpadarc.azurecr.io'
              DockerRepository: '${{ parameters.REPOSITORY }}'
              DockerImageTag: '$(pomversion.next)'

  # # Build and deploy JOB microservice docker
  # - task: Docker@2
  #   inputs:
  #     containerRegistry: $(CONTAINER_REGISTRY)
  #     repository: 'job'
  #     command: 'buildAndPush'
  #     Dockerfile: './upload-payments/Dockerfile.deploy'
  #     tags: '0.0.1'

  # - task: AzureRMWebAppDeployment@4
  #   displayName: Azure App Service Deploy
  #   inputs:
  #     appType: webAppContainer
  #     ConnectedServiceName: $(AZURE_SUBSCRIPTION)
  #     WebAppName: 'hubpa-d-job-ms'
  #     DockerNamespace: 'hubpadarc.azurecr.io'
  #     DockerRepository: 'job'
  #     DockerImageTag: '0.0.1'

  # # Build and deploy SERVICE microservice docker
  # - task: Docker@2
  #   inputs:
  #     containerRegistry: $(CONTAINER_REGISTRY)
  #     repository: 'service'
  #     command: 'buildAndPush'
  #     Dockerfile: './service-managment/Dockerfile.deploy'
  #     tags: '0.0.1'

  # - task: AzureRMWebAppDeployment@4
  #   displayName: Azure App Service Deploy
  #   inputs:
  #     appType: webAppContainer
  #     ConnectedServiceName: $(AZURE_SUBSCRIPTION)
  #     WebAppName: 'hubpa-d-service-ms'
  #     DockerNamespace: 'hubpadarc.azurecr.io'
  #     DockerRepository: 'service'
  #     DockerImageTag: '0.0.1'
